package com.exampple.leetcode.simple;

/**
 * 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
 * 如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
 * <p>
 * 给定一个代表每个房屋存放金额的   **非负整数**  数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
 * <p>
 * <p>
 * 输入: [1,2,3,1]
 * 输出: 4
 * 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
 *      偷窃到的最高金额 = 1 + 3 = 4 。
 * <p>
 * **********************************************************************
 * <p>
 * <p>
 * 输入: [2,7,9,3,1]
 * 输出: 12
 * 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
 *      偷窃到的最高金额 = 2 + 9 + 1 = 12 。
 */
public class Solution_0198 {


    /**
     * 从数组中取数 , 相邻的数字 只能取一个 , 使得最终的所有数字和 最大
     *
     * 找规律 , 四个数  里面必然会取两个数
     */

    /**
     * 状态方程  : dp[i] = Max( dp[i-1] , dp[i-2] + nums[i] )    // 动态规划  :  可以理解为找规律 , 然后递推  ? ? ?
     */
    public int rob(int[] nums) {

        if (nums == null || nums.length == 0)
            return 0;

        int[] dp = new int[nums.length];

        for (int i = 0; i < nums.length; i++) {

            if (i == 0) {
                dp[0] = nums[0];
            } else if (i == 1) {
                dp[1] = Math.max(nums[0], nums[1]);
            } else {
                dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
            }

        }

        return dp[nums.length - 1];
    }
}
